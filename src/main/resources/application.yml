spring:
  datasource:
    #    Normal local setup for MySQL
#    driverClassName: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/computerStore?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=UTC
#    username: root
#    password: 1111


    #    Setup for building jar which to be executed by Dockerfile and a docker image to be burnt/created
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/computerStore?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=UTC
    username: ${MYSQL_USER}
    password:


    #    Normal local setup for PostgreSQL
    #    driverClassName: org.postgresql.Driver
    #    url: jdbc:postgresql://localhost:5432/computerstore?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=UTC
    #    username: postgres
    #    password: 1111


    #    heroku deployment
    #    driverClassName: org.postgresql.Driver
    #    url: ${JDBC_DATABASE_URL:} #Heroku uses only this variable. Username and password is automatic
    #    username: ${JDBC_DATABASE_USERNAME:}
    #    password: ${JDBC_DATABASE_PASSWORD:}
    #    hikari:
    #      connection-timeout: 30000
    #      maximum-pool-size: 10


    #    railway deployment
  #    driverClassName: org.postgresql.Driver
  #    url: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${POSTGRES_DB_NAME}
  #    username: ${POSTGRES_USER}
  #    password: ${POSTGRES_PASSWORD}
  #    hikari:
  #      connection-timeout: 30000
  #      maximum-pool-size: 10

  mvc:
    hiddenmethod:
      filter:
        enabled: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    #    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: true
  #    show_sql: true
  sql:
    init:
      mode: never
  security:
    oauth2:
      client:
        registration:
          facebook:
            client-id: 1277767399626116
            client-secret: ${FACEBOOK_LOGIN_SECRET}

server:
  error:
    whitelabel:
      enabled: false
    path: /error
  port: ${PORT:8080}

app:
  default:
    admin:
      password: 11111

#Cloudinary properties
cloudinary:
  cloud_name: "dtfd8gw16"
  api_key: "218356847735493"
  api_secret: ${CLOUDINARY_SECRET:123}

#logging:
#  level:
#    org.springframework: DEBUG   #debugging while logging more info
#    org.hibernate.SQL: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

mail:
  host: "localhost"
  port: 1025
  username: "computer@store.com"
  password: ""